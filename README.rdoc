1. Stworzmy sklep
   * Nasz sklep bedzie wyposazony w skryp ktory bedzie sluzyl do wygnerowania losowych prodkuktow
     kategori oraz obrazkow
   * Bedzie mozna wejsc do kazdego prodkutu, zamowic go z poziomu produktu
   * Jak rownież z pozoimu kategorii takze bedzie mozna dokanac zamowien
   * Bedzie mial pelna nawigacje
   * Na gorze strony bedzie koszyk z podgladem ile mamy produktowy w koszyku i ile bedzie nasz kosztowac zamowienie
   * Bedziemy miele formularz dostawy i rodzaj dostawy
   * Bedziemy mieli potwerdzenie zamowienia i gdy wyslemy zamowienie bedzie wysylany mail z potwierdzeniem
   * Bedzie posiadal panel admina, zabezpieczony haslem
   * Bedziemy mieli mozliwosc zarzadzaniem produktami z poziomu admina
   * Mozliwosc przesukiwania prodkutow
   * Sklep bedzie takze sledzil status zamowienia

  * rails g Shop_Online -d mysql



  * Pierwsza rzecz to dodanie potrzebnych gemow (wiekaszosc naraz dodam)

                gem 'faker'                     # sluzy do generowania danych ktore sa falszywe ale wygladaja na prawdziwe
                gem 'letter_opener'             # sluzy do generowania malera i ktory nie jest wysylany tylko pokazuje zawartos maila
                gem 'carrierwave'               # zalanczanie plikow i przetwarzanie ich do miniatuerk
                gem 'mini_magick'               # dodatek do carrierwawe i sluzy do przetwarzania miniatuerk
                gem 'simple_form'               # proste generownaie formularze
                gem 'twitter-bootstrap-rails'   # bibloteka dodajaca nam bootstrapa do projektu
                gem 'ransack'                   # sluzy do generowania formularzy wyszukiwania (np. do przeszukiwania produktow)
                gem 'kaminari'                  # sluzy do paginacji
                gem 'rails-i18n'                # sluzy do spolszczenia polskich komunikacji
                gem 'statesman'                 # sluzy do maszyny stanow (czyli rozne statusy: nowe, potwirdzony, anulowano, oplacony czyli przelancza nas z jednego stanu w drugi np. ze przesylka zostala nadana)
  * bundle
  ** config/environments/development.rb
     - i ustawiamy zeby maile wysylane byle przez letter_openera:
           # Czyli zamiast wysylac prawdziwego maila - bedziemy te maile otwierac w przegladarce
            config.action_mailer.delivery_method = :letter_opener
  ** config/application.rb
     - i ustawienie jezyka polskiego
           config.i18n.default_locale = :pl
           dziki temu komiunikaty o bledach beda automatycznie spolszczone


  9.2 Zaplanowanie prac ze sklepem, wygenerowanie szablonow
       ( Instalcja_podstawych_skladowych_sklepu_mni_bootstrap_modele_kontrolry)
    * Najpierw wygenerujemy bootstrapa       - rails g bootstrap:install static
    * Instalacja kaminari dla bootstrapa     - rails g kaminari:views bootstrap3
    * Simpe_form kompatybilny z bootstrapem  - rails g simple_form:install --bootstrap   (https://github.com/plataformatec/simple_form)

   ** Czas na wygenerowanie kontrollerow:
       - rails g controller products index show  (tu potrzebujemy tylko dwuch akcji)
       - rails g controller categories show      (dodamy mozliwosc wyswietlania zawartosci kategori, czyli tylko jednej akcji show)
       - rails g controller static terms privacy shipping about ( potrzebujemy kontrollera ktory bedzie przechowywal nasze statyczne strony typu, regulamin czy polityka sklepu)
                        zawiera:
                                terms     - regulamin,
                                privacy   - polityka prywatnosci,
                                shipping  - informacje na temat dostawy i
                                about     - informacje o sklepie )
   ** Teraz modele
      - rails g model category name:string  (Wiemy ze napewno bedziemy mieli produkty podzielone na kategorie, wiec z tad model o nazwie kategoraria i bedzie posadala name)
      - rails g model product  name:string description:text long_description:text photo:string price:decimal category:belongs_to
                        wiemy takze ze musimy miec produkty ktore beda zwierac:
                        name                  - nazwe
                        description           - opis
                        long_description      - dluzszy opis, bedziemy wyswietlac go tylko w szczegolach danego produktu
                        photo                 - pole do przechowywania sciezki do zdjecia danego produktu
                        price                 - cena
                        category:belongs_to   - ostatecznie produkt bedzie nalezal do jakiejs kategorii
   ** Wiemy, ze produkty beda posadaly zdjaca.  Wiec musimy wygenerowac uploader dla CarrierWave czyli plikow ze zdjeciami oraz ich obrubke, np. generowanie miniatur o odpowiednim rozmiarze tak aby pasowaly do desingu
      - rails generate uploader product_photo
          app/uploaders/product_photo_uploader
                  include CarrierWave::MiniMagick                       # Odchaczamy nasz modul, minimagic odpowiada za intergracje z carierrwave
                                                                        # i to walanie on dokonuje prztwarzania wszystkich obrazkow na miniatury itd.
                                                                        # Jezeli nie zaimplementujemy tego modulu to carrierwave nie bedzie wiedzial w jaki sposob wykonac
                                                                        # metode resize_to_fit * rake db:create    - poniewaz mamy mysql
                                                                        # I ten modul wlasnie odpowiada za obsluge obrazkow
   * rake db:migrate

   9.3 Skonfigurowanie_adresow_url_oraz_modeli
      * Zacznijmy od przygotowania naszego uploadera do odpowiedniego przyjmowania plikow
        app/uploaders/product_phot_uploader.rb
          - gdy zjedziemy nizej to widzimy ze mamy udokumentowany sposob na przechowywanie wersji,
          - nam bedzie potrzebny do miniaturki i orginalny rozmiar
                        # Create different versions of your uploaded files:
                        # version :thumb do
                        #   process :resize_to_fit => [50, 50]
                        # end
          - My damy sobie tak:
                          version :thumb do
                            process :resize_to_fit => [120, 120]
                          end

                          version :details do
                            process :resize_to_fit => [640, 480]
                          end
          - Oraz odznaczamy :
                          include CarrierWave::MiniMagick                       # Odchaczamy nasz modul, minimagic odpowiada za intergracje z carierrwave
      ** Teraz model z kategoria
         - kategoria posiada wiele produktow i produkty naleza do kategorii polaczmy modele
                  class Category < ActiveRecord::Base
                    has_many :products                   # liczba mnoga poniewaz mamy wiele produktow
                    validates :name, presence: true      # zrobmy odrazu walidacje na to pole
                  end
      ** Nastepnie model z produktami
         - generator rails juz nam polaczyl model
         - dodajmy szereg walidacji
               class Product < ActiveRecord::Base
                 belongs_to :category
                 validates :name, presence: true                        # pole z nazwa nie moze byc puste
                 validates :description, presence: true                 # pole z opisem nie moze byc puste
                 validates :price, numericality: { greater_than: 0.0 }  # cena powinna byc wieksza niz zero i musi byc liczba
                 validates :category, presence: true                    # deklarujemy ze chcemy ja zwalidowac i przypozadkowac do kategorii

                 mount_uploader :photo, ProductPhotoUploader         # Musimy takze zamontowac nasz uploader pochodzacy z gemu CarrierWave
                                                                     # Jako argument przkazujemy nazwe photo, ktora bedzie przechowywala sciezke do pliku
                                                                     # Oraz nazwe klasy, ktora obsluguje dane uploadsy
               end

      ** Teraz plik z routsami
        - Ustawmy nasze główne configi
            resources :products, only: [:show, :index]     # nasz resources products bedzie posiadal tylko dwie akcje
            resources :categories, only: [:show]           # dodatkowo zadeklarujemy kategorie ktora bedzie posiadala tylko jedna akcje
            root to: 'products#index'                      # i nasz glowny adres

        - Warto ustwic jak beda wygladaly adresy url naszych statycznych stron
             get 'regulamin', to: "static#terms", as: :terms                # Czyli wchodzac do akcji (slesh regulamin) /regulamin, bedziemy kierowac do kotrollera static i akcji terms i url nazwiemy terms (termss_path)
             get 'polityka-prywatnosci', to: "static#privacy", as: :privacy
             get 'dostawa', to: "static#shipping", as: :shipping
             get 'o-sklepie', to: "static#about", as: :about

        * Odpalmy nasz serwer


9.4 Szkice listy produktow
    ** Teraz zajmniemy sie zaplanowaniem desingu naszego sklepu
     - zapelnimy go falszywymi danymi od fakera - tylko po to zeby zobaczyc jak bedzie wygladac
     - naszkicujemy nasz layots i szczegoly naszego leyoutu
     - linki gorne naszego menu
     - gorna belka nawigacyjna

     ** Nawigacja - fac, ale to Zajebiste,
      * Cala belka nawigacyjna jest oparta o klasy bootstrap

        <nav class="navbar navbar-inverse navbar-static-top">     <!-- navbar-inverse, ta klasa domyslnie ma odwrocone kolory, ale teraz bedzie ciemna i bedzie miala bialy tekst -->
          <div class="container">
            <div class="navbar-header">
              <a class="navbar-brand" href="<%= root_path %>">Robo</a>
            </div>
            <ul class="nav navbar-nav">
              <li <% if [params[:controller], params[:action]] == ["products", "index"] %>class="active"<% end %>><%= link_to "Start", root_path %></li>
              <li <% if [params[:controller], params[:action]] == ["static", "privacy"] %>class="active"<% end %>><%= link_to "Polityka prywatności", privacy_path %></li>
              <li <% if [params[:controller], params[:action]] == ["static", "terms"] %>class="active"<% end %>><%= link_to "Regulamin", terms_path %></li>
              <li <% if [params[:controller], params[:action]] == ["static", "shipping"] %>class="active"<% end %>><%= link_to "Regulamin", shipping_path %></li>
              <li <% if [params[:controller], params[:action]] == ["static", "about"] %>class="active"<% end %>><%= link_to "O sklepie", about_path %></li>
            </ul>
          </div>
        </nav>

     ** Teraz wchodzac w start m.innymi na pasku nawigacji
        - rails s i widzimy nasz szablonik
        - bedziemy chceli miec pasek boczny (sidebar)
        - czyli tkzw. linki, beda po lewej w pionie
        - a po prawej stronie tresc strony
        - wszystkie te klasy ponizej sa wbudowane w bootstrapa

          <div class="container-fluid">
             <div class="row">                                     # Wszystko przechowujemy w divie o klasie row, i ktory przechowuje wiersz o systemie girdowym bootstrapa
               <div class="col-md-2">
                 <h3>Kategorie</h3>
                     <ul class="nav nav-sidebar">
                       <% (1..9).each do |category|%>              # Tutaj generamy 9 linkow do kategori
                           <li>
                             <%= link_to "Kategoria#{category}", category_path(category) %>
                           </li>
                       <% end %>
                     </ul>
               </div>
               <div class="col-md-10">
                 <%= yield %>
               </div>
             </div>
          </div>


          # gird jest pewnym systemem klockow o danym rozmiarze do ktorych wpisujemy tresc czyli:
              <div class="col-md-2">     -> ta klasa, nazywa sie col-md-2, dwujka oznacza tutaj dwie kratki w systemie gridowym
                                         -> bootstrapowy gird zawiera 12 kratek
                                         -> a my uzywamy dwuch dwunastych 2/12 czyli 1/6 miejsca na ekranie na sidebar

               <div class="col-md-10">   -> oraz 10/12 dziesiec dwunastych, czyli 5/6 na pozostala tresc
                                         * Jezeli bysmy zmienili ten gorny na md-4, a dolny na md-8 to
                                           wtedy bysmy mieli 4/12 i 8/12 to oczywiscie sidebar bedzie mial wieksza szerokkosc
                                           ale za to bedziemy mieli miej miejsca na zawartosc strony
          # Czyli bootstrap daje nam bardzo wygodne klasy do lokowania tresci zgodnie z layotsem kolumnowm






   ** Teraz na naszej glownej stronie chcemy wyswietlic najnowszych produktow
    * Wchodzimy na nasza głowna strone  views/products/index

      <%= (1..9).each_slice(3) do |slice| %>                                                       <!-- Bedziemy wyswietlac 9 elementow, wiec od 1 do 9 sobie wyliczymy i uzyjemy helpera  each_slice ktory nam podzieli te tablice na iles tablic, ktora kazda z nich bedzie zawierala po trzy elementy -->
          <div class="row">                                                                        <!-- Produkty bedziemy wyswietlac w 3 kolumnach wiec uzyjemy systemu gird z bootstrapa -->
            <% slice.each do |product| %>                                                          <!-- Kazda z tych trujek jest tablica po ktorej bedzimey literowac -->
                <div class="col-md-4">                                                             <!-- Skoro chcemy 3 produkty w kazdym wierszu, i skoro mamy 12 kratek w naszym girdzie, to kazdy produkt zajmnie 1/3 z tych 12 czyli 4kratki   -->
                  <div class="thumbnail">                                                          <!-- Z kolieji ta klasa jest klasa ktora reprezentuje miniaturke -->
                    <%= link_to product_path(product) do %>                                              <!-- link_to przyjmuje zazwyczaj parametr jakis tekst, natomiast drugi to jakas sciezka, natomiat kiedy nie podamy mu tekstu do linku i uczynimy ten helper blokowym (do i end) to zamiast scizki linkowej mozemy miec jako link np. OBRAZEK, WIEC JEZELI CHCEMY ZALINKOWAC OBRAZEK UZYWAMY DO zeby zasignalizowac ZE BEDZIE TO link blokowy i  tresci tego uzyjemy image_taga-->
                        <%= image_tag Faker::Placeholdit.image("640x480", 'jpg', 'cccccc') %>      <!-- Faker oferuje nam skorzystanie z serwisu http://placehold.it i wygenerowac nam obrazki o danym rozmiarze-->
                    <% end %>
                    <div class="caption">
                      <h3><%= link_to Faker::Hacker.noun.titleize, product_path(1) %></h3>                  <!-- Tu mamy nazwe produkut z uzyciem helpera Faker::Hacker.noun -->
                      <p><%= simple_format(truncate(Faker::Hacker.say_something_smart, length: 90)) %></p>  <!--  Tutaj opis danego produktu, czyli jakies wygenerowane zdanie przez fakera -->
                      <p class="lead"><%= number_to_currency Faker::Number.decimal(2, 2) %></p>             <!--  I tutaj cena danego produktu-->
                      <p>
                        <%= link_to "#", class: "btn btn-primary" do %>
                          <span class="fa fa-shopping-cart"> Dodaj do koszyka             <!-- I tu mamy bardzo ciekawa klase bootstrapa fa dlatego ze mamy strone http://fontawesome.io  czyli ikonki, fa-to pierwsza klasa ze to fontawsome i druga klasa to opis ikonik-->
                        <% end %>
                      </p>
                    </div>
                  </div>
                </div>
            <% end %>
          </div>
      <% end %>

      - rails s
      - po odswiezeniu strony nazwy sie beda zmieniac, poniewaz sa generowane losowo przez nasz helper Faker
      ** Dodajmy teraz naglwej ze sa to produkty najnowsze
               <h1>Najnowsze produkty</h1>


      ** Chcemy zeby nasz widok z lista produktow  byl widoczny takze gdzie indziej wiec zrobimy go parshalem
           <%= render partial: 'products', locals: { products: (1..9) } %>       -> wywolamy renderowanie parszala, i do niego przekazemy zmienna
      ** Tworzymy parshala
         - wycinamy kod z index.html.erb
         - tworzymy nowy _products.html.erb
         - wklejamy nasz wyciety kod


               <%= (1..9).each_slice(3) do |slice| %>                                                       <!-- Bedziemy wyswietlac 9 elementow, wiec od 1 do 9 sobie wyliczymy i uzyjemy helpera  each_slice ktory nam podzieli te tablice na iles tablic, ktora kazda z nich bedzie zawierala po trzy elementy -->
                   <div class="row">                                                                        <!-- Produkty bedziemy wyswietlac w 3 kolumnach wiec uzyjemy systemu gird z bootstrapa -->
                     <% slice.each do |product| %>                                                          <!-- Kazda z tych trujek jest tablica po ktorej bedzimey literowac -->
                         <div class="col-md-4">                                                             <!-- Skoro chcemy 3 produkty w kazdym wierszu, i skoro mamy 12 kratek w naszym girdzie, to kazdy produkt zajmnie 1/3 z tych 12 czyli 4kratki   -->
                           <div class="thumbnail">                                                          <!-- Z kolieji ta klasa jest klasa ktora reprezentuje miniaturke -->
                             <%= link_to product_path(product) do %>                                              <!-- link_to przyjmuje zazwyczaj parametr jakis tekst, natomiast drugi to jakas sciezka, natomiat kiedy nie podamy mu tekstu do linku i uczynimy ten helper blokowym (do i end) to zamiast scizki linkowej mozemy miec jako link np. OBRAZEK, WIEC JEZELI CHCEMY ZALINKOWAC OBRAZEK UZYWAMY DO zeby zasignalizowac ZE BEDZIE TO link blokowy i  tresci tego uzyjemy image_taga-->
                                 <%= image_tag Faker::Placeholdit.image("640x480", 'jpg', 'cccccc') %>      <!-- Faker oferuje nam skorzystanie z serwisu http://placehold.it i wygenerowac nam obrazki o danym rozmiarze-->
                             <% end %>
                             <div class="caption">
                               <h3><%= link_to Faker::Hacker.noun.titleize, product_path(1) %></h3>                  <!-- Tu mamy nazwe produkut z uzyciem helpera Faker::Hacker.noun -->
                               <p><%= simple_format(truncate(Faker::Hacker.say_something_smart, length: 90)) %></p>  <!--  Tutaj opis danego produktu, czyli jakies wygenerowane zdanie przez fakera -->
                               <p class="lead"><%= number_to_currency Faker::Number.decimal(2, 2) %></p>             <!--  I tutaj cena danego produktu-->
                               <p>
                                 <%= link_to "#", class: "btn btn-primary" do %>
                                     <span class="fa fa-shopping-cart"></span> Dodaj do koszyka             <!-- I tu mamy bardzo ciekawa klase bootstrapa fa dlatego ze mamy strone http://fontawesome.io  czyli ikonki, fa-to pierwsza klasa ze to fontawsome i druga klasa to opis ikonik-->
                                 <% end %>
                               </p>
                             </div>
                           </div>
                         </div>
                     <% end %>
                   </div>
               <% end %>


       ** Teraz chcemy tego parshala uzyc w innym miejscu np. w views/categories/show
          - uzyjemy kodu podobnego do produktu

          <h1>Nazwa kategori</h1>

          <%= render partial: 'products/products', locals: { products: @products } %>

          <!-- Poprzednia nazwa parshala nie zadziala  ( wersja z innego kontrollera <%= render partial: 'products', locals: { products: (1..9) } %> )
               poniewaz railsy beda szukac praszala wylacznie
               wewnatrz categories, a nasz parszal pochodzi z innego źrudla
               ale jak railsom podamy pelna nazwe controllera czyli products i nazwe parszala czyli products
               to railsy je znajda bez problemu
               i wtedy wyswietli nam sie oczekiwany rezultat
           -->



9.5 .Szkic_szczegolow_produktu
     views/products/show
     - Zrobimy tak, ze po prawej stronie mamy obrazek,
       - pomiedzy obrazkiem a paskiem bocznym: nazwe produktu, opis, szczegoly i przycisk
        
              <div class="container-fluid">
                <div class="col-md-5">                                                       <!-- Tutaj takze korzystamy z girda bootstrapowego, bedzie zajmowa 5/12 miejsca na takie rzeczy jak opis, nazwe produtkow, cenne -->
                  <h1><%= Faker::Hacker.noun %></h1>
                  <p class="lead"><%= Faker::Hacker.say_something_smart %></p>
                  <%= simple_format(Faker::Lorem.paragraphs(3).join("\n\n")) %>

                  <p class="lead"><%= number_to_currency(Faker::Number.decimal(2, 2)) %></p>
                  <p>
                    <%= link_to "#", class: "btn btn-primary" do %>
                      <span class="fa fa-shopping-cart">  Dodaj do koszyka </span>
                    <% end %>
                  </p>
                </div>
                <div class="col-md-7">                                                         <!-- A po prawej stronie mamy 7/12 zajmowanego miejsca, kiedy obrazek bedzie zbyd duzy na obszar jaki mu dano, to obrazek bedzie pomniejszony i dostosowany do danego miejsca  -->
                  <%= image_tag Faker::Placeholdit.image("640x480", 'jpg', 'cccccc'), class: "img-responsive" %>
                </div>
              </div>


9.6 Skrypt_generowania_losowych_testowych_produktow
    **
    Napiszemy skrypt, ktroy stworzy prawdziwe wpisy do bazy danych - uzywajac fakera do wygenerowania wartosci do naszych pol
    - i kiedy bedziemy wyswitlac nasze produkty z prawidzwymi danymi to nasz sklep bedzie bardziej znacznie kolorowy niz jest aktualnie szere placehodery
    - Potencjalnie dobrym miejscem dla wygenerownia takiego skryptu jest miejsce /db/seeds.rb
    - Do tego pliku dodaje sie zawyczaj dane ktore umozliwiaja uruchomienie aplikacji
      db/seeds.rb

          ShippingType.create name: "Paczka Pocztowa", cost: 10.0
          ShippingType.create name: "Kurier", cost: 20.0


         8.times do                                                   # W tym bloku losujemy 8 kategori
           Category.create! name: Faker::Hacker.ingverb.capitalize    # Tu tworzymy nowe kategorie z losowa nazwa wygenerowana przez Fakera
         end

         category_ids = Category.pluck(:id)                           # Tutaj przechowuje w zmiennej wszystkie numery id tych kategorii,
                                                                      # metoda pluck  w active record przyjmuje 1argument w postaci nazwy kolumny
                                                                      # i ta metoda zwraca tablice z wartosciami w tej kolumnie wszystkich wierszy w bazie dannych

         print "Product "
         200.times do       # nastepnie 200 razy wywolujemy ten blok, i w nim dodajemy produkty
           product = Product.create! name: "#{Faker::Hacker.verb} #{Faker::Hacker.noun}".capitalize, # dajemy naze
                                     description: Faker::Hacker.say_something_smart,                 # wywolujemy krotki opis
                                     long_description: Faker::Lorem.paragraphs(3).join("\n\n"),      # Wywolujemy dlugi opis
                                     category_id: category_ids.sample,                               # wybieramy losowa kategorie, czyli na tablicy z wszystkimi identyfikatorami kategorii wywolujemy metode sample, ktroy zwraca losowy element z tej tablicy
                                     price: Faker::Number.decimal(3, 2)                              # generujemy losowa cene
           product.remote_photo_url = Faker::Avatar.image(                   # Generujemy losowy obrazek produktu
               product.name.parameterize,
               "640x480",                  # ma miec rozmiar
               "jpg",                      # byc w formacie jpg
               "set#{[1, 2, 3].sample}",   # obrazek ma byc wykorzystany ze wszystkich setow 1-set wyswietla roboty, 2-set twarze robotow, 3-set potworki
               "bg#{[1, 2].sample}"        # tutaj mowimy z ktorego tla losoego bedziemy korzystac
           )
           product.save   # zapisujemy produkt
           print "."      # kropecza sygnalizuje nam ze cos sie dzieje poniewaz skrytp bedzie dzialal dosc dlugo, ze sie nie zawiesil, nie zapetlil
         end
         puts             # i wyswitlamy

    - Tak napisany skrypt mozemy wywolac
      rake db:seed
    - Musimy teraz usunac bd i stworzyc na nowo, wprowadzic wszystkie dane:
       rake db:drop     - usowa bd
       rake db:create   - tworzy bd
       rake db:migrate  - odpala migracje
       rake db:seed     - odpala skrypt

       rake db:drop db:create db:migrate db:seed        ->  to wszsytko mozemy wykonac za pomoca jednego polecenia
       widzimy ze wszystko dzila, i nasz skrypt wyswietla kropeczki (bedzie ich 200)

 9.7 Wyswietlanie produktow w bd
     **
     Nasze losowe dane zostaly juz dodane do bazy danych
     - teraz mozemy przystapic do ich wyswietlenia

     **
     Zaczniemy od pliku z layotem, chcemy wyswietlac prawdziwe kategorie

                   <!-- Nasz sidebar - pasek boczny -->
                      <div class="container-fluid">
                        <div class="row">
                          <div class="col-md-2">
                            <h3>Kategorie</h3>
                            <ul class="nav nav-sidebar">
                              <% Category.all.each do |category| %>                        <!-- Wyswitlmy teraz prawdziwe kategorie -->
                                  <li>
                                    <%= link_to category.name, category_path(category) %>  <!-- 1-argumenty to category, a 2gim argumentem bedzie sciezka do category -->
                                  </li>
                              <% end %>
                            </ul>
                          </div>
                          <div class="col-md-8">
                            <%= yield %>
                          </div>
                        </div>
                      </div>


      - odswiezmy strone
      - widzimy ze mamy teraz prawdziwe kategorie
      - teraz jak wchodzimy do kategorii po pierwsze powinna nam sie wyswietlic nazwa kategori a nastepnie produkty
      - wchodzimy do kontrollera controllers/categories_controller.rb


              class CategoriesController < ApplicationController
                def show
                 @category = Category.find(params[:id])                        # i w akcji show powininsmy znalesc kategorie ktora chcemy wysietlac
                 @products = @category.products.page(params[:page]).per(6)     # a po drugie znalezc produkty z tej kategorii i dodamy paginacje, na kazdej stronie 6produktowend
              end

     - I teraz w widkou views/categories/show dajmy prawdzwe dane
                 <h1><%= @category.name  %></h1>

                 <%= render partial: 'products/products', locals: { products: @products } %>

                 <!-- Dodajmy paginacje -->
                 <%= paginate @products %>
     - Odswiezamy strone i widzimy ze jest tak jak nalerzy
     **
     - Gdy przewiniemy strone widzimy paginacje, ktora nie wyglada za ladnie
     - Pamietamy ze dodajac kaminari do projektu wygenerowalismy takze paginacje i teraz ja usuniemy
     - usowamy next last oraz first, prev

     views/kaminari/_paginator.html.erb
                        <%= paginator.render do -%>
                          <ul class="pagination">
                            <% each_page do |page| -%>
                              <% if page.left_outer? || page.right_outer? || page.inside_window? -%>
                                <%= page_tag page %>
                              <% elsif !page.was_truncated? -%>
                                <%= gap_tag %>
                              <% end -%>
                            <% end -%>
                          </ul>
                        <% end -%>

     - i gdy teraz odswizymy mamy ladna paginacjie

     **
     Teraz czas na zaimplementowanie listy
        views/categories/show.html.erb
              <h1><%= @category.name  %></h1>
                <%= render partial: 'products/products', locals: { products: @products } %>
                   <%= paginate @products %>

     **
     Teraz zajmijmy sie naszym parszalem   views/products/_products.html.erb
     - tak aby nie pobieraly danych w locie tylko pobieraly z naszego produktu

                   <% products.each_slice(3) do |slice| %>                                                       <!-- Bedziemy wyswietlac 9 elementow, wiec od 1 do 9 sobie wyliczymy i uzyjemy helpera  each_slice ktory nam podzieli te tablice na iles tablic, ktora kazda z nich bedzie zawierala po trzy elementy -->
                       <div class="row">                                                                        <!-- Produkty bedziemy wyswietlac w 3 kolumnach wiec uzyjemy systemu gird z bootstrapa -->
                         <% slice.each do |product| %>                                                          <!-- Kazda z tych trujek jest tablica po ktorej bedzimey literowac -->
                             <div class="col-md-4">                                                             <!-- Skoro chcemy 3 produkty w kazdym wierszu, i skoro mamy 12 kratek w naszym girdzie, to kazdy produkt zajmnie 1/3 z tych 12 czyli 4kratki   -->
                               <div class="thumbnail">
                                                                                      <!-- Z kolieji ta klasa jest klasa ktora reprezentuje miniaturke -->
                                 <%= link_to product_path(product) do %>
                                    <%= image_tag product.photo.url  %>
                                 <% end %>


                                 <div class="caption">
                                   <h3><%= link_to Faker::Hacker.noun.titleize, product_path(1) %></h3>                  <!-- Tu mamy nazwe produkut z uzyciem helpera Faker::Hacker.noun -->
                                   <p><%= simple_format(truncate(Faker::Hacker.say_something_smart, length: 90)) %></p>  <!--  Tutaj opis danego produktu, czyli jakies wygenerowane zdanie przez fakera -->
                                   <p class="lead"><%= number_to_currency Faker::Number.decimal(2, 2) %></p>             <!--  I tutaj cena danego produktu-->
                                   <p>
                                     <%= link_to "#", class: "btn btn-primary" do %>
                                         <span class="fa fa-shopping-cart"></span> Dodaj do koszyka             <!-- I tu mamy bardzo ciekawa klase bootstrapa fa dlatego ze mamy strone http://fontawesome.io  czyli ikonki, fa-to pierwsza klasa ze to fontawsome i druga klasa to opis ikonik-->
                                     <% end %>
                                   </p>
                                 </div>
                               </div>
                             </div>
                         <% end %>
                       </div>
                   <% end %>


           DO WYSTARTOWANIA API / Nie startuje CarrierWave ze zdjeciami
                - potrzeba nam kontrollra:
                     class ProductsController < ApplicationController
                       def index
                         @products = Product.order(created_at: :desc).limit(9)
                       end

                       def show
                         @product = Product.find(params[:id])
                         @category = @product.category
                       end
                     end
                - uploadera
                     class Product < ActiveRecord::Base
                       belongs_to :category

                       validates :name, presence: true                        # pole z nazwa nie moze byc puste
                       validates :description, presence: true                 # pole z opisem nie moze byc puste
                       validates :price, numericality: { greater_than: 0.0 }  # cena powinna byc wieksza niz zero i musi byc liczba
                       validates :category, presence: true                    # deklarujemy ze chcemy ja zwalidowac i przypozadkowac do kategorii


                       mount_uploader :photo, ProductPhotoUploader
                           # Musimy takze zamontowac nasz uploader pochodzacy z gemu CarrierWave
                           # Jako argument przkazujemy nazwe photo, ktora bedzie przechowywala sciezke do pliku
                           # Oraz nazwe klasy, ktora obsluguje dane uploadsy
                     end
                - chwilowo inspecta
                       <%= @products.each_slice(3) do |slice| %>                                                       <!-- Bedziemy wyswietlac 9 elementow, wiec od 1 do 9 sobie wyliczymy i uzyjemy helpera  each_slice ktory nam podzieli te tablice na iles tablic, ktora kazda z nich bedzie zawierala po trzy elementy -->
                           <div class="row">                                                                        <!-- Produkty bedziemy wyswietlac w 3 kolumnach wiec uzyjemy systemu gird z bootstrapa -->
                             <% slice.each do |product| %>                                                          <!-- Kazda z tych trujek jest tablica po ktorej bedzimey literowac -->
                                 <div class="col-md-4">                                                             <!-- Skoro chcemy 3 produkty w kazdym wierszu, i skoro mamy 12 kratek w naszym girdzie, to kazdy produkt zajmnie 1/3 z tych 12 czyli 4kratki   -->
                                   <div class="thumbnail">                                                          <!-- Z kolieji ta klasa jest klasa ktora reprezentuje miniaturke -->
                                     <%= link_to product_path(product) do %>
                                         <%= render text: @products.first.photo.url(:thumb).inspect  %>
                                     <% end %>
                                     <div class="caption">
                                       <h3><%= link_to Faker::Hacker.noun.titleize, product_path(1) %></h3>                  <!-- Tu mamy nazwe produkut z uzyciem helpera Faker::Hacker.noun -->
                                       <p><%= simple_format(truncate(Faker::Hacker.say_something_smart, length: 90)) %></p>  <!--  Tutaj opis danego produktu, czyli jakies wygenerowane zdanie przez fakera -->
                                       <p class="lead"><%= number_to_currency Faker::Number.decimal(2, 2) %></p>             <!--  I tutaj cena danego produktu-->
                                       <p>
                                         <%= link_to "#", class: "btn btn-primary" do %>
                                             <span class="fa fa-shopping-cart"></span> Dodaj do koszyka             <!-- I tu mamy bardzo ciekawa klase bootstrapa fa dlatego ze mamy strone http://fontawesome.io  czyli ikonki, fa-to pierwsza klasa ze to fontawsome i druga klasa to opis ikonik-->
                                         <% end %>
                                       </p>
                                     </div>
                                   </div>
                                 </div>
                             <% end %>
                           </div>
                       <% end %>





           UZUPELNIJMY DALSZA CZESC NASZEJ API
           - W parszalu products/_products.html.erb    wstawmy PRAWDZIWE DANE
                    <%= @products.each_slice(3) do |slice| %>                                                    <!-- Bedziemy wyswietlac 9 elementow, wiec od 1 do 9 sobie wyliczymy i uzyjemy helpera  each_slice ktory nam podzieli te tablice na iles tablic, ktora kazda z nich bedzie zawierala po trzy elementy -->
                        <div class="row">                                                                        <!-- Produkty bedziemy wyswietlac w 3 kolumnach wiec uzyjemy systemu gird z bootstrapa -->
                          <% slice.each do |product| %>                                                          <!-- Kazda z tych trujek jest tablica po ktorej bedzimey literowac -->
                              <div class="col-md-4">                                                             <!-- Skoro chcemy 3 produkty w kazdym wierszu, i skoro mamy 12 kratek w naszym girdzie, to kazdy produkt zajmnie 1/3 z tych 12 czyli 4kratki   -->
                                <div class="thumbnail">                                                          <!-- Z kolieji ta klasa jest klasa ktora reprezentuje miniaturke -->
                                  <%= link_to product_path(product) do %>
                                      <%= image_tag product.photo.url(:thumb).inspect  %>
                                  <% end %>
                                  <div class="caption">
                                    <h3><%= link_to product.name, product %></h3>                           <!-- Podaje prawdziwa nazwe produktu -->
                                    <p><%= simple_format(truncate(product.description, length: 90)) %></p>  <!--  Formatuje opis produktu -->
                                    <p class="lead"><%= number_to_currency product.price %></p>             <!--  I tutaj cena danego produktu -->
                                    <p>
                                      <%= link_to "#", class: "btn btn-primary" do %>
                                          <span class="fa fa-shopping-cart"></span> Dodaj do koszyka             <!-- I tu mamy bardzo ciekawa klase bootstrapa fa dlatego ze mamy strone http://fontawesome.io  czyli ikonki, fa-to pierwsza klasa ze to fontawsome i druga klasa to opis ikonik-->
                                      <% end %>
                                    </p>
                                  </div>
                                </div>
                              </div>
                          <% end %>
                        </div>
                    <% end %>

           - TERAZ CZAS NA STRONE GLOWNA
           - Najpierw musze wejsc do naszego kontrollera i ustawic co ma sie w nim wyswietlac w akcji index i show
                    def index
                        @products = Product.order(created_at: :desc).limit(9)      # Tutaj napierw musze znalezc produkt i wyswietlic malejaco i wybieramy 9 z nich
                    end

                    def show
                      @product = Product.find(params[:id])         # Tu znajdujmey losowy produkt i go wyswietlimy
                      @category = @product.category
                    end


           - gdy wejde na  strone glowna i odswieze, to widze ze to sa te same prokuty czyli z BD
           - Zacznijmy od akcji index

                      views/products/index.html.erb
                           <h1>Najnowsze produkty</h1>
                           <%= render partial: 'products', locals: { products: @products } %>      -> zmienimy nasza losowa zmienna i ustawimy na nasz @products
           - i gdy teraz wejdziemy na strone glówna bedziemy widzies 9 najnowszych produktow


           ** TERAZ WYSWIETLE SZCZEGOLY DANEGO PRODUKTU
             - zrobimy tak ze strona ze szczegolami bedzie wyswietlac prawdziwe dane z BD
             - musze wyedytowac plik
                          views/products/show.html.erb
                              **** i ten kod generujacy dane w locie
                                          <div class="container-fluid">
                                            <div class="col-md-5">                                                       <!-- Tutaj takze korzystamy z girda bootstrapowego, bedzie zajmowa 5/12 miejsca na takie rzeczy jak opis, nazwe produtkow, cenne -->
                                              <h1><%= Faker::Hacker.noun %></h1>
                                              <p class="lead"><%= Faker::Hacker.say_something_smart %></p>
                                              <%= simple_format(Faker::Lorem.paragraphs(3).join("\n\n")) %>

                                              <p class="lead"><%= number_to_currency(Faker::Number.decimal(2, 2)) %></p>
                                              <p>
                                                <%= link_to "#", class: "btn btn-primary" do %>
                                                  <span class="fa fa-shopping-cart">  Dodaj do koszyka </span>
                                                <% end %>
                                              </p>
                                            </div>
                                            <div class="col-md-7">                                                         <!-- A po prawej stronie mamy 7/12 zajmowanego miejsca, kiedy obrazek bedzie zbyd duzy na obszar jaki mu dano, to obrazek bedzie pomniejszony i dostosowany do danego miejsca  -->
                                              <%= image_tag Faker::Placeholdit.image("640x480", 'jpg', 'cccccc'), class: "img-responsive" %>
                                            </div>
                                          </div>
                              **** ZASTAPIE KODEM POBIERAJACYM DANE Z BD

                                       <div class="container-fluid">
                                         <div class="col-md-5">                                                       <!-- Tutaj takze korzystamy z girda bootstrapowego, bedzie zajmowa 5/12 miejsca na takie rzeczy jak opis, nazwe produtkow, cenne -->
                                           <h1><%= @product.name %></h1>
                                           <p class="lead"><%= @product.description %></p>
                                           <%= simple_format(@product.long_description) %>

                                           <p class="lead"><%= number_to_currency(@product.price) %></p>
                                           <p>
                                             <%= link_to "#", class: "btn btn-primary" do %>
                                               <span class="fa fa-shopping-cart">  Dodaj do koszyka </span>
                                             <% end %>
                                           </p>
                                         </div>
                                         <div class="col-md-7">
                                           <%= image_tag @product.photo.url(:details).inspect, class: "img-responsive" %>     --> DALEM INSPECTA NARAZIE NIE MA OBRAZKA
                                         </div>
                                       </div>


7.Usprawnienia_nawigacji_Optymalizacja_SEO
   - Tutaj zajmniemy sie nawigacja
   - sprawie ze aktulne kategorie beda sie ladnie podswietlac
       * aktualnie w bootsrapie nie ma ladnego podswietlania naszego sidebaru(paska bocznego) dlatego tez tym sie zajmniemy
         - dodamy wlasna regule css
         - app/assets/stylesheets/application.css
              /* Regula podswietlajaca nasz SIDEBAR - PASEK BOCZNY */
              .nav-sidebar > .active > a,
              .nav-sidebar > .active > a:hover,
              .nav-sidebar > .active > a:focus {
                  color: #fff;
                  background-color: #428bca;
              }

   - Teraz musimy przejsc do naszego pliku z layoutsem

             <% Category.all.each do |category| %>                                        <!-- Wyswitlmy teraz prawdziwe kategorie -->
                             <li <% if @category == category %>class="active"<% end %>>   <!-- dodamy klase active, ktora podswietla nam nazwe, czyli jezeli dana kategoria jest aktywna,  to podswietlamy tylko ta kategorie -->
                               <%= link_to category.name, category_path(category) %>      <!-- 1-argumenty to category, a 2gim argumentem bedzie sciezka do category -->
                             </li>
             <% end %>
       - i gdy teraz odsiezymy strone to wszystko dziala
       - ale gdy wejdziemy w szeczoly produktu to podswietlenie znika
       - musimy dodac w kontrolerze products zmienna  @category poniewz porównujemy ja z category <li <% if @category == category %>class="active"<% end %>>
              def show
                  @product = Product.find(params[:id])
                  @category = @product.category           # Zmienna pomocna w podswietlaniu sidebara i uzyta w layotsie
              end


   ** Czas na górna nawigacje
       - Linki musze podlinkowac do prawdziwych akcji
       - po drugie podswietlic link kiedy uzytkownik znajduje sie w danej akcji danego kontrollera
       - layouts/application.html.erb
       - kod docelowo wyglada tak
                        <ul class="nav navbar-nav">
                          <li <% if [params[:controller], params[:action]] == ["products", "index"] %>class="active"<% end %>><%= link_to "Start", root_path %></li>
                          <li <% if [params[:controller], params[:action]] == ["static", "privacy"] %>class="active"<% end %>><%= link_to "Polityka prywatności", privacy_path %></li>
                          <li <% if [params[:controller], params[:action]] == ["static", "terms"] %>class="active"<% end %>><%= link_to "Regulamin", terms_path %></li>
                          <li <% if [params[:controller], params[:action]] == ["static", "shipping"] %>class="active"<% end %>><%= link_to "Regulamin", shipping_path %></li>
                          <li <% if [params[:controller], params[:action]] == ["static", "about"] %>class="active"<% end %>><%= link_to "O sklepie", about_path %></li>
                        </ul>
                                <!-- Czyli tworze sobie tablice, w ktorej pierwsza z nich to nazwa kontrollera a druga nazwa akcji -->
                                <!-- I porównuje ja do aktulanego kontrolera w ktorym sie znajduje i akcji jakiej jestem -->
                                <!-- Jezeli jest taki sam to podswietlam akcjie -->


   ** Kiedy klikniemy w kategorie lub produkt, to w pasku widzimy categories i products ZPLOSZCZMY TO
          resources :products, only: [:show, :index], path: "produkt"       # nasz resources products bedzie posiadal tylko dwie akcje   SPOLSZCZMY NASZA NAZWE W PASKU UZWYAJAC OPCJI O NAZWIE PATH
          resources :categories, only: [:show] , path: "kategoria"          # dodatkowo zadeklarujemy kategorie                          I TU TAKZE SPOLSZCZMY
          root to: 'products#index'                                         #nasz glowny adres































