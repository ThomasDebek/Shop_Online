1. Stworzmy sklep
   * Nasz sklep bedzie wyposazony w skryp ktory bedzie sluzyl do wygnerowania losowych prodkuktow
     kategori oraz obrazkow
   * Bedzie mozna wejsc do kazdego prodkutu, zamowic go z poziomu produktu
   * Jak rownież z pozoimu kategorii takze bedzie mozna dokanac zamowien
   * Bedzie mial pelna nawigacje
   * Na gorze strony bedzie koszyk z podgladem ile mamy produktowy w koszyku i ile bedzie nasz kosztowac zamowienie
   * Bedziemy miele formularz dostawy i rodzaj dostawy
   * Bedziemy mieli potwerdzenie zamowienia i gdy wyslemy zamowienie bedzie wysylany mail z potwierdzeniem
   * Bedzie posiadal panel admina, zabezpieczony haslem
   * Bedziemy mieli mozliwosc zarzadzaniem produktami z poziomu admina
   * Mozliwosc przesukiwania prodkutow
   * Sklep bedzie takze sledzil status zamowienia

  * rails g Shop_Online -d mysql



  * Pierwsza rzecz to dodanie potrzebnych gemow (wiekaszosc naraz dodam)

                gem 'faker'                     # sluzy do generowania danych ktore sa falszywe ale wygladaja na prawdziwe
                gem 'letter_opener'             # sluzy do generowania malera i ktory nie jest wysylany tylko pokazuje zawartos maila
                gem 'carrierwave'               # zalanczanie plikow i przetwarzanie ich do miniatuerk
                gem 'mini_magick'               # dodatek do carrierwawe i sluzy do przetwarzania miniatuerk
                gem 'simple_form'               # proste generownaie formularze
                gem 'twitter-bootstrap-rails'   # bibloteka dodajaca nam bootstrapa do projektu
                gem 'ransack'                   # sluzy do generowania formularzy wyszukiwania (np. do przeszukiwania produktow)
                gem 'kaminari'                  # sluzy do paginacji
                gem 'rails-i18n'                # sluzy do spolszczenia polskich komunikacji
                gem 'statesman'                 # sluzy do maszyny stanow (czyli rozne statusy: nowe, potwirdzony, anulowano, oplacony czyli przelancza nas z jednego stanu w drugi np. ze przesylka zostala nadana)
  * bundle
  ** config/environments/development.rb
     - i ustawiamy zeby maile wysylane byle przez letter_openera:
           # Czyli zamiast wysylac prawdziwego maila - bedziemy te maile otwierac w przegladarce
            config.action_mailer.delivery_method = :letter_opener
  ** config/application.rb
     - i ustawienie jezyka polskiego
           config.i18n.default_locale = :pl
           dziki temu komiunikaty o bledach beda automatycznie spolszczone


  9.2 Zaplanowanie prac ze sklepem, wygenerowanie szablonow
       ( Instalcja_podstawych_skladowych_sklepu_mni_bootstrap_modele_kontrolry)
    * Najpierw wygenerujemy bootstrapa       - rails g bootstrap:install static
    * Instalacja kaminari dla bootstrapa     - rails g kaminari:views bootstrap3
    * Simpe_form kompatybilny z bootstrapem  - rails g simple_form:install --bootstrap   (https://github.com/plataformatec/simple_form)

   ** Czas na wygenerowanie kontrollerow:
       - rails g controller products index show  (tu potrzebujemy tylko dwuch akcji)
       - rails g controller categories show      (dodamy mozliwosc wyswietlania zawartosci kategori, czyli tylko jednej akcji show)
       - rails g controller static terms privacy shipping about ( potrzebujemy kontrollera ktory bedzie przechowywal nasze statyczne strony typu, regulamin czy polityka sklepu)
                        zawiera:
                                terms     - regulamin,
                                privacy   - polityka prywatnosci,
                                shipping  - informacje na temat dostawy i
                                about     - informacje o sklepie )
   ** Teraz modele
      - rails g model category name:string  (Wiemy ze napewno bedziemy mieli produkty podzielone na kategorie, wiec z tad model o nazwie kategoraria i bedzie posadala name)
      - rails g model product  name:string description:text long_description:text photo:string price:decimal category:belongs_to
                        wiemy takze ze musimy miec produkty ktore beda zwierac:
                        name                  - nazwe
                        description           - opis
                        long_description      - dluzszy opis, bedziemy wyswietlac go tylko w szczegolach danego produktu
                        photo                 - pole do przechowywania sciezki do zdjecia danego produktu
                        price                 - cena
                        category:belongs_to   - ostatecznie produkt bedzie nalezal do jakiejs kategorii
   ** Wiemy, ze produkty beda posadaly zdjaca.  Wiec musimy wygenerowac uploader dla CarrierWave czyli plikow ze zdjeciami oraz ich obrubke, np. generowanie miniatur o odpowiednim rozmiarze tak aby pasowaly do desingu
      - rails generate uploader product_photo
   * rake db:create    - poniewaz mamy mysql
   * rake db:migrate

   9.3 Skonfigurowanie_adresow_url_oraz_modeli
      * Zacznijmy od przygotowania naszego uploadera do odpowiedniego przyjmowania plikow
        app/uploaders/product_phot_uploader.rb
          - gdy zjedziemy nizej to widzimy ze mamy udokumentowany sposob na przechowywanie wersji,
          - nam bedzie potrzebny do miniaturki i orginalny rozmiar
                        # Create different versions of your uploaded files:
                        # version :thumb do
                        #   process :resize_to_fit => [50, 50]
                        # end
          - My damy sobie tak:
                          version :thumb do
                            process :resize_to_fit => [120, 120]
                          end

                          version :details do
                            process :resize_to_fit => [640, 480]
                          end
      ** Teraz model z kategoria
         - kategoria posiada wiele produktow i produkty naleza do kategorii polaczmy modele
                  class Category < ActiveRecord::Base
                    has_many :prodcuts
                    validates :name, presence: true      # zrobmy odrazu walidacje na to pole
                  end
      ** Nastepnie model z produktami
         - generator rails juz nam polaczyl model
         - dodajmy szereg walidacji
               class Product < ActiveRecord::Base
                 belongs_to :category
                 validates :name, presence: true                        # pole z nazwa nie moze byc puste
                 validates :description, presence: true                 # pole z opisem nie moze byc puste
                 validates :price, numericality: { greater_than: 0.0 }  # cena powinna byc wieksza niz zero i musi byc liczba
                 validates :category, presence: true                    # deklarujemy ze chcemy ja zwalidowac i przypozadkowac do kategorii

                 mount_uploader :photo, ProductPhotoUploader         # Musimy takze zamontowac nasz uploader pochodzacy z gemu CarrierWave
                                                                     # Jako argument przkazujemy nazwe photo, ktora bedzie przechowywala sciezke do pliku
                                                                     # Oraz nazwe klasy, ktora obsluguje dane uploadsy
               end

      ** Teraz plik z routsami
        - Ustawmy nasze główne configi
            resources :products, only: [:show, :index]     # nasz resources products bedzie posiadal tylko dwie akcje
            resources :categories, only: [:show]           # dodatkowo zadeklarujemy kategorie ktora bedzie posiadala tylko jedna akcje
            root to: 'products#index'                      # i nasz glowny adres

        - Warto ustwic jak beda wygladaly adresy url naszych statycznych stron
             get 'regulamin', to: "static#terms", as: :terms                # Czyli wchodzac do akcji (slesh regulamin) /regulamin, bedziemy kierowac do kotrollera static i akcji terms i url nazwiemy terms (termss_path)
             get 'polityka-prywatnosci', to: "static#privacy", as: :privacy
             get 'dostawa', to: "static#shipping", as: :shipping
             get 'o-sklepie', to: "static#about", as: :about

        * Odpalmy nasz serwer


9.4 Szkice listy produktow
    ** Teraz zajmniemy sie zaplanowaniem desingu naszego sklepu
     - zapelnimy go falszywymi danymi od fakera - tylko po to zeby zobaczyc jak bedzie wygladac
     - naszkicujemy nasz layots i szczegoly naszego leyoutu
     - linki gorne naszego menu
     - gorna belka nawigacyjna
     


               







